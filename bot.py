# –°–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª, –æ—Ç—Å—é–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—à—å –∫–æ–¥.
import logging
import discord
from discord.ext import commands
from dotenv import load_dotenv
import os
import requests
import aiohttp
import steam_register
import json
import stats_dota
from steam_id import steam_ids

STEAM_JSON = "steam_ids.json"

def load_steam_ids():
    try:
        with open(STEAM_JSON, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


load_dotenv()  # —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º .env
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

active_matches = {}

TOKEN = os.getenv("DISCORD_TOKEN")
bot.run(TOKEN)

if TOKEN is None:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ZHORA_TOKEN")

# –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–æ–º–∞–Ω–¥ –ñ–æ—Ä—ã
bot = commands.Bot(command_prefix="–∂–æ—Ä–∞ ", intents=discord.Intents.all())
steam_register.setup(bot)

@bot.event
async def on_ready():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print(f'–ë–æ—Ç {bot.user.name} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Discord!')
    await bot.change_presence(activity=discord.Game(name="–æ—á–∫–µ —Ç–≤–æ–µ–π –º–∞—Ç–µ—Ä–∏"))



# --- –ö–æ–º–∞–Ω–¥—ã (–ø–∏–Ω–≥, –∏–Ω—Ñ–æ, –∫–æ–º–∞–Ω–¥—ã)
@bot.command(name="–∫–æ–º–∞–Ω–¥—ã")
async def show_commands(ctx):
    embed = discord.Embed(
        title="üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ñ–æ—Ä—ã –°–±–µ—Ä–±–∞–Ω–∫–∞",
        description="–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        color=0x2391e0
    )

    # --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
    embed.add_field(name="üí° –û—Å–Ω–æ–≤–Ω—ã–µ", value=(
        "`–∂–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "`–∂–æ—Ä–∞ –ø–∏–Ω–≥` ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞\n"
        "`–∂–æ—Ä–∞ –∏–Ω—Ñ–æ` ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
    ), inline=False)

    # --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
    embed.add_field(name="üõ° –ê–¥–º–∏–Ω—Å–∫–∏–µ", value=(
        "`–∂–æ—Ä–∞ —Å–±–æ—Ä_–¥–æ—Ç–∞` ‚Äî –ü–∏–Ω–≥—É–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å —Ä–æ–ª—å—é '—è–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –≤ –¥–æ—Ç—É'\n"
        "`–∂–æ—Ä–∞ –Ω–∞—á–∞—Ç—å_–º–∞—Ç—á bo1/bo3/bo5` ‚Äî –ù–∞—á–∞—Ç—å —Å–µ—Ä–∏—é –º–∞—Ç—á–µ–π 5x5\n"
        "`–∂–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤_1 / –∂–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤_2` ‚Äî –ó–∞–¥–∞—Ç—å —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥\n"
        "`–∂–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç team1/team2` ‚Äî –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–±–µ–¥–∏–≤—à—É—é –∫–æ–º–∞–Ω–¥—É\n"
        "`–∂–æ—Ä–∞ —Å—á–µ—Ç` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç —Å–µ—Ä–∏–∏"
    ), inline=False)

    # --- –ü—Ä–æ—Ñ–∏–ª–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
    embed.add_field(name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤", value=(
        "`–∂–æ—Ä–∞ —Å—Ç–∏–º (–≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –±–æ—Ç–æ–º)` ‚Äî —É–∫–∞–∑–∞—Ç—å —Å—Ç–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∏–∂–µ.\n"
        "`–∂–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—å @–∏–≥—Ä–æ–∫` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ —Å OpenDota\n"
        "`–∂–æ—Ä–∞ —Ç–æ–ø_—Ä–∞–Ω–≥` ‚Äî –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–∞–Ω–≥—É\n"
        "`–∂–æ—Ä–∞ —Ç–æ–ø_–≤—Ä` ‚Äî –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É\n"
        "`–∂–æ—Ä–∞ —Å—Ä–∞–≤–Ω–∏—Ç—å @–∏–≥—Ä–æ–∫1 @–∏–≥—Ä–æ–∫2` ‚Äî –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤"
    ), inline=False)

    embed.set_footer(text="–°–æ–∑–¥–∞–Ω –∫–∞–∫ –∫–µ–Ω—Ç –∫ –ì–æ—à–µ –ü–∞—Ü–∞–Ω—É | –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∏–≥—Ä–∞–º–∏ 5x5")

    await ctx.send(embed=embed)


@bot.command(name="–ø–∏–Ω–≥")
async def ping(ctx):
    await ctx.send(f"–ó–∞–¥–µ—Ä–∂–∫–∞: {round(bot.latency * 1000)}ms")

@bot.command(name="–∏–Ω—Ñ–æ")
async def info(ctx):
    embed = discord.Embed(
        title="‚ÑπÔ∏è –û –ñ–æ—Ä–µ",
        description="–Ø ‚Äî –ñ–æ—Ä–∞ –°–±–µ—Ä–±–∞–Ω–∫, –∫—É—Ä—å–µ—Ä –î–∞–º–∏—Ä–∞ –∏ –∫–µ–Ω—Ç –ì–æ—à–∏ –ü–∞—Ü–∞–Ω–∞. "
                    "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Ä–≤–µ—Ä–æ–º, –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ –∏ –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.",
        color=0x34a853
    )
    embed.set_footer(text="–°–æ–∑–¥–∞–Ω –∫–∞–∫ –∫–µ–Ω—Ç –∫ –ì–æ—à–µ –ü–∞—Ü–∞–Ω—É")
    await ctx.send(embed=embed)

# --- –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ "—Å–±–æ—Ä_–¥–æ—Ç–∞"
@bot.command(name="—Å–±–æ—Ä_–¥–æ—Ç–∞")
@commands.has_permissions(administrator=True)
async def general_call(ctx):
    role_name = "—è–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –≤ –¥–æ—Ç—É"
    role = discord.utils.get(ctx.guild.roles, name=role_name)

    if role is None:
        await ctx.send(f"‚ö†Ô∏è –†–æ–ª—å '{role_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    members = [member.mention for member in ctx.guild.members if role in member.roles]
    if not members:
        await ctx.send("‚ùå –ù–∏–∫–æ–≥–æ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    for mention in members:
        await ctx.send(f"üì¢ **–û–±—â–∏–π —Å–±–æ—Ä!** {mention}")



heroes = {
    1: "Anti-Mage",
    2: "Axe",
    3: "Bane",
    4: "Bloodseeker",
    5: "Crystal Maiden",
    6: "Drow Ranger",
    7: "Earthshaker",
    8: "Juggernaut",
    9: "Mirana",
    10: "Morphling",
    11: "Shadow Fiend",
    12: "Phantom Lancer",
    13: "Puck",
    14: "Pudge",
    15: "Razor",
    16: "Sand King",
    17: "Storm Spirit",
    18: "Sven",
    19: "Tiny",
    20: "Vengeful Spirit",
    21: "Windranger",
    22: "Zeus",
    23: "Kunkka",
    25: "Lina",
    26: "Lion",
    27: "Shadow Shaman",
    28: "Slardar",
    29: "Tidehunter",
    30: "Witch Doctor",
    31: "Lich",
    32: "Riki",
    33: "Enigma",
    34: "Tinker",
    35: "Sniper",
    36: "Necrophos",
    37: "Warlock",
    38: "Beastmaster",
    39: "Queen of Pain",
    40: "Venomancer",
    41: "Faceless Void",
    42: "Wraith King",
    43: "Death Prophet",
    44: "Phantom Assassin",
    45: "Pugna",
    46: "Templar Assassin",
    47: "Viper",
    48: "Luna",
    49: "Dragon Knight",
    50: "Dazzle",
    51: "Clockwerk",
    52: "Leshrac",
    53: "Nature's Prophet",
    54: "Lifestealer",
    55: "Dark Seer",
    56: "Clinkz",
    57: "Omniknight",
    58: "Enchantress",
    59: "Huskar",
    60: "Night Stalker",
    61: "Broodmother",
    62: "Bounty Hunter",
    63: "Weaver",
    64: "Jakiro",
    65: "Batrider",
    66: "Chen",
    67: "Spectre",
    68: "Ancient Apparition",
    69: "Doom",
    70: "Ursa",
    71: "Spirit Breaker",
    72: "Gyrocopter",
    73: "Alchemist",
    74: "Invoker",
    75: "Silencer",
    76: "Outworld Devourer",
    77: "Lycan",
    78: "Brewmaster",
    79: "Shadow Demon",
    80: "Lone Druid",
    81: "Chaos Knight",
    82: "Meepo",
    83: "Treant Protector",
    84: "Ogre Magi",
    85: "Undying",
    86: "Rubick",
    87: "Disruptor",
    88: "Nyx Assassin",
    89: "Naga Siren",
    90: "Keeper of the Light",
    91: "Io",
    92: "Visage",
    93: "Slark",
    94: "Medusa",
    95: "Troll Warlord",
    96: "Centaur Warrunner",
    97: "Magnus",
    98: "Timbersaw",
    99: "Bristleback",
    100: "Tusk",
    101: "Skywrath Mage",
    102: "Abaddon",
    103: "Elder Titan",
    104: "Legion Commander",
    105: "Techies",
    106: "Ember Spirit",
    107: "Earth Spirit",
    108: "Underlord",
    109: "Terrorblade",
    110: "Phoenix",
    111: "Oracle",
    112: "Winter Wyvern",
    113: "Arc Warden",
    114: "Monkey King",
    119: "Dark Willow",
    120: "Pangolier",
    121: "Grimstroke",
    123: "Mars",
    126: "Void Spirit",
    128: "Snapfire",
    129: "Hoodwink",
    135: "Dawnbreaker",
    136: "Marci",
    137: "Primal Beast",
    138: "Muerta",
    131: "Ringmaster",
    140: "Kez"
}

@bot.command(name="—Å—Ä–∞–≤–Ω–∏—Ç—å")
async def compare_players(ctx, member1: discord.Member, member2: discord.Member):
    try:
        with open("steam_ids.json", "r") as f:
            steam_ids = json.load(f)
    except FileNotFoundError:
        steam_ids = {}

    steam1 = steam_ids.get(str(member1.id))
    steam2 = steam_ids.get(str(member2.id))

    if not steam1 or not steam2:
        await ctx.send("‚ùå –û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Steam ID.")
        return

    try:
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
        def get_profile(steam_id):
            data = requests.get(f"https://api.opendota.com/api/players/{steam_id}").json()
            profile = data.get("profile", {})
            nickname = profile.get("personaname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            rank_tier = data.get("rank_tier")
            rank_text = rank_tier_to_text(rank_tier) if rank_tier else "–ù–µ—Ç —Ä–∞–Ω–≥–∞"
            return {"nickname": nickname, "rank": rank_text}

        prof1 = get_profile(steam1)
        prof2 = get_profile(steam2)

        # –í–∏–Ω—Ä–µ–π—Ç
        wl1 = requests.get(f"https://api.opendota.com/api/players/{steam1}/wl").json()
        wl2 = requests.get(f"https://api.opendota.com/api/players/{steam2}/wl").json()

        winrate1 = round(wl1.get("win", 0) / max(wl1.get("win",0) + wl1.get("lose",0), 1) * 100, 1)
        winrate2 = round(wl2.get("win", 0) / max(wl2.get("win",0) + wl2.get("lose",0), 1) * 100, 1)
        winrate_diff = round(abs(winrate1 - winrate2), 1)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –º–∞—Ç—á–µ–π –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
        matches1 = requests.get(f"https://api.opendota.com/api/players/{steam1}/matches?limit=500").json()
        matches2 = requests.get(f"https://api.opendota.com/api/players/{steam2}/matches?limit=500").json()

        # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ç—á–∏, –≥–¥–µ –æ–Ω–∏ –±—ã–ª–∏ –≤ –æ–¥–Ω–æ–π –ø–∞—Ä—Ç–∏–∏ (same party)
        matches2_dict = {m["match_id"]: m for m in matches2}
        shared_games = 0
        for m1 in matches1:
            m2 = matches2_dict.get(m1["match_id"])
            if m2 and m1.get("party_size") and m2.get("party_size") and m1["party_size"] == m2["party_size"]:
                shared_games += 1

        # Embed
        embed = discord.Embed(
            title=f"‚öî –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {member1.display_name} –∏ {member2.display_name}",
            color=0x00ffcc
        )

        embed.add_field(name=f"{member1.display_name}", value=f"‚≠ê –†–∞–Ω–≥: {prof1['rank']}\nüìä –í–∏–Ω—Ä–µ–π—Ç: {winrate1}%", inline=True)
        embed.add_field(name=f"{member2.display_name}", value=f"‚≠ê –†–∞–Ω–≥: {prof2['rank']}\nüìä –í–∏–Ω—Ä–µ–π—Ç: {winrate2}%", inline=True)
        embed.add_field(name="–†–∞–∑–Ω–∏—Ü–∞ –≤ –≤–∏–Ω—Ä–µ–π—Ç–µ", value=f"{winrate_diff}%", inline=False)
        embed.add_field(name="–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã", value=str(shared_games), inline=False)

        if winrate1 > winrate2:
            embed.set_footer(text=f"–ë–æ–ª—å—à–µ –≤–∏–Ω—Ä–µ–π—Ç: {member1.display_name} ‚úÖ")
        elif winrate2 > winrate1:
            embed.set_footer(text=f"–ë–æ–ª—å—à–µ –≤–∏–Ω—Ä–µ–π—Ç: {member2.display_name} ‚úÖ")
        else:
            embed.set_footer(text="–í–∏–Ω—Ä–µ–π—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π ‚öñÔ∏è")

        await ctx.send(embed=embed)

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}")


rank_to_mmr = {
    "–†–µ–∫—Ä—É—Ç": [0, 154, 308, 462, 616],
    "–°—Ç—Ä–∞–∂": [770, 924, 1078, 1232, 1386],
    "–†—ã—Ü–∞—Ä—å": [1540, 1694, 1848, 2002, 2156],
    "–ì–µ—Ä–æ–π": [2310, 2464, 2618, 2772, 2926],
    "–õ–µ–≥–µ–Ω–¥–∞": [3080, 3234, 3388, 3542, 3696],
    "–í–ª–∞—Å—Ç–µ–ª–∏–Ω": [3850, 4004, 4158, 4312, 4466],
    "–ë–æ–º–∂–µ—Å—Ç–≤–æ": [4620, 4820, 5020, 5220, 5420],
    "–¢–∏—Ç–∞–Ω": ["5620+"]  # Immortal
}

def rank_tier_to_text(rank_tier):
    ranks = {
        1: "–†–µ–∫—Ä—É—Ç", 2: "–°—Ç—Ä–∞–∂", 3: "–†—ã—Ü–∞—Ä—å",
        4: "–ì–µ—Ä–æ–π", 5: "–õ–µ–≥–µ–Ω–¥–∞", 6: "–í–ª–∞—Å—Ç–µ–ª–∏–Ω", 7: "–ë–æ–º–∂–µ—Å—Ç–≤–æ", 8: "–¢–∏—Ç–∞–Ω"
    }
    if not rank_tier:
        return "–ù–µ—Ç —Ä–∞–Ω–≥–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    tier = rank_tier // 10
    stars = rank_tier % 10
    if tier == 8:  # Immortal
        return "–¢–∏—Ç–∞–Ω", "5620+"

    roman_stars = ["", "I", "II", "III", "IV", "V"]
    rank_name = ranks.get(tier, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    mmr_estimate = rank_to_mmr.get(rank_name, ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])[stars-1] if stars > 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    return f"{rank_name} {roman_stars[stars]}", f"~{mmr_estimate}"

@bot.command(name="–ø—Ä–æ—Ñ–∏–ª—å")
async def dota_profile(ctx, member: discord.Member):
    steam_ids = load_steam_ids()  # —á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –∏–∑ —Ñ–∞–π–ª–∞
    steam_id = steam_ids.get(str(member.id))
    if not steam_id:
        await ctx.send(f"‚ùå {member.display_name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Å–≤–æ–π Steam ID, –¥–ª—è —ç—Ç–æ–≥–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª—Å –±–æ—Ç—É `–∂–æ—Ä–∞ —Å—Ç–∏–º`")
        return

    try:
        # --- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ---
        url_player = f"https://api.opendota.com/api/players/{steam_id}"
        data = requests.get(url_player).json()

        profile = data.get("profile", {})
        nickname = profile.get("personaname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        avatar = profile.get("avatarfull")
        mmr = data.get("mmr_estimate", {}).get("estimate")
        rank_tier = data.get("rank_tier")
        rank_text = rank_tier_to_text(rank_tier)

        # --- –í–∏–Ω/–ª–æ–∑ ---
        url_wl = f"https://api.opendota.com/api/players/{steam_id}/wl"
        wl_data = requests.get(url_wl).json()
        wins = wl_data.get("win", 0)
        losses = wl_data.get("lose", 0)
        total_games = wins + losses
        winrate = round((wins / total_games) * 100, 1) if total_games else 0

        # --- –õ—é–±–∏–º—ã–µ –≥–µ—Ä–æ–∏ ---
        url_heroes = f"https://api.opendota.com/api/players/{steam_id}/heroes"
        heroes_data = requests.get(url_heroes).json()
        top_heroes = sorted(heroes_data, key=lambda x: x['games'], reverse=True)[:5]
        top_heroes_text = ""
        for h in top_heroes:
            hero_name = heroes.get(h['hero_id'], f"ID {h['hero_id']}")
            hero_winrate = round(h['win'] / h['games'] * 100, 1) if h['games'] > 0 else 0
            top_heroes_text += f"{hero_name} ({h['games']} –∏–≥—Ä, {hero_winrate}% –≤–∏–Ω)\n"

        # --- –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–≥—Ä ---
        url_recent = f"https://api.opendota.com/api/players/{steam_id}/recentMatches"
        recent_games = requests.get(url_recent).json()[:5]
        recent_text = ""
        for game in recent_games:
            hero_name = heroes.get(game['hero_id'], f"ID {game['hero_id']}")
            player_radiant = game.get("player_slot") < 128  # 0-127 Radiant, 128-255 Dire
            radiant_win = game.get("radiant_win")
            result = "‚úÖ –ü–æ–±–µ–¥–∞" if (player_radiant and radiant_win) or (not player_radiant and not radiant_win) else "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
            kills = game.get("kills", 0)
            deaths = game.get("deaths", 0)
            assists = game.get("assists", 0)
            duration = game.get("duration", 0)
            minutes = duration // 60
            seconds = duration % 60
            recent_text += f"{hero_name} | {result} | KDA: {kills}/{deaths}/{assists} | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}–º {seconds}—Å\n"

        # --- Embed ---
        embed = discord.Embed(title=f"üéÆ –ü—Ä–æ—Ñ–∏–ª—å {member.display_name}", color=0x00ff00)
        if avatar:
            embed.set_thumbnail(url=avatar)
        embed.add_field(name="Steam", value=nickname, inline=True)
        rank_text, mmr_text = rank_tier_to_text(rank_tier)

        embed.add_field(name="‚≠ê –†–∞–Ω–≥", value=rank_text, inline=True)
        embed.add_field(name="üíé –ü—Ä–∏–º–µ—Ä–Ω—ã–π MMR", value=mmr_text, inline=True)  # <-- –≤–æ—Ç —Å—é–¥–∞ Z

        embed.add_field(name="üìä –í–∏–Ω—Ä–µ–π—Ç", value=f"{winrate}% ({wins}W / {losses}L)", inline=False)
        embed.add_field(name="üî• –õ—é–±–∏–º—ã–µ –≥–µ—Ä–æ–∏", value=top_heroes_text or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", inline=False)
        embed.add_field(name="üïπ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–≥—Ä", value=recent_text or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", inline=False)

        await ctx.send(embed=embed)

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

@bot.command(name="—Ç–æ–ø_—Ä–∞–Ω–≥")
async def top_rank(ctx):
    try:
        with open("steam_ids.json", "r") as f:
            steam_ids = json.load(f)
    except FileNotFoundError:
        steam_ids = {}

    players = []
    for discord_id, steam_id in steam_ids.items():
        member = ctx.guild.get_member(int(discord_id))
        if not member:
            continue  # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        try:
            url = f"https://api.opendota.com/api/players/{steam_id}"
            data = requests.get(url).json()
            rank_tier = data.get("rank_tier")
            players.append((rank_tier or 0, member.display_name))
        except:
            continue

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –≤—ã—Å—à–µ–≥–æ —Ä–∞–Ω–≥–∞ –∫ –Ω–∏–∑—à–µ–º—É
    players_sorted = sorted(players, key=lambda x: x[0], reverse=True)

    embed = discord.Embed(
        title="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–∞–Ω–≥—É",
        color=0xFFD700
    )

    for i, (rank_tier, nickname) in enumerate(players_sorted[:10], start=1):
        rank_text = rank_tier_to_text(rank_tier) if rank_tier else "–ù–µ—Ç —Ä–∞–Ω–≥–∞"
        embed.add_field(name=f"{i}. {nickname}", value=f"–†–∞–Ω–≥: {rank_text}", inline=False)

    await ctx.send(embed=embed)


@bot.command(name="—Ç–æ–ø_–≤—Ä")
async def top_wr(ctx):
    try:
        with open("steam_ids.json", "r") as f:
            steam_ids = json.load(f)
    except FileNotFoundError:
        steam_ids = {}

    results = []

    for user_id, steam_id in steam_ids.items():
        wl_response = requests.get(f"https://api.opendota.com/api/players/{steam_id}/wl")
        if wl_response.status_code == 200:
            wl_data = wl_response.json()
            wins = wl_data.get("win", 0)
            losses = wl_data.get("lose", 0)
            total = wins + losses
            winrate = round((wins / total) * 100, 1) if total > 0 else 0
            results.append((ctx.guild.get_member(int(user_id)), winrate, wins, losses))

    results.sort(key=lambda x: x[1], reverse=True)

    desc = "\n".join([f"**{i+1}. {r[0].display_name}** ‚Äî {r[1]}% (W:{r[2]} / L:{r[3]})" for i, r in enumerate(results[:10])])
    embed = discord.Embed(title="üìä –¢–û–ü –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É", description=desc, color=0x00ffcc)
    await ctx.send(embed=embed)

# –ü–æ–ª—É—á–µ–Ω–∏–µ MMR –∏–≥—Ä–æ–∫–∞
def get_player_mmr_or_estimate(mention):
    try:
        with open("steam_ids.json", "r") as f:
            steam_ids = json.load(f)
    except FileNotFoundError:
        steam_ids = {}

    discord_id = mention.strip("<@!>")
    steam_id = steam_ids.get(str(discord_id))
    if not steam_id:
        return 0  # –µ—Å–ª–∏ –Ω–µ—Ç Steam ID, —Å—á–∏—Ç–∞–µ–º MMR = 0

    try:
        data = requests.get(f"https://api.opendota.com/api/players/{steam_id}").json()
        mmr = data.get("mmr_estimate", {}).get("estimate")
        if mmr is None:
            rank_tier = data.get("rank_tier", 0)
            mmr = rank_tier * 500
        return mmr
    except:
        return 0

async def calculate_win_chances_from_team(team1, team2, steam_ids):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É –∫–æ–º–∞–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤–∏–Ω—Ä–µ–π—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è team1 –∏ team2.
    """

    async def avg_wr(team):
        total_wr = 0
        count = 0
        async with aiohttp.ClientSession() as session:
            for member in team:
                steam_id = steam_ids.get(str(member.id if hasattr(member, 'id') else member))
                if not steam_id:
                    continue
                try:
                    async with session.get(f"https://api.opendota.com/api/players/{steam_id}/wl", timeout=5) as resp:
                        if resp.status != 200:
                            continue
                        wl_data = await resp.json()
                        wins = wl_data.get("win", 0)
                        losses = wl_data.get("lose", 0)
                        total_games = wins + losses
                        if total_games > 0:
                            total_wr += wins / total_games
                            count += 1
                except:
                    continue
        return (total_wr / count) if count > 0 else None  # None –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö

    wr1 = await avg_wr(team1)
    wr2 = await avg_wr(team2)

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –ø–æ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 50/50
    if wr1 is None and wr2 is None:
        return 50, 50
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, —Å—á–∏—Ç–∞–µ–º –µ—ë —Å–∏–ª—å–Ω–µ–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
    if wr1 is None:
        wr1 = wr2
    if wr2 is None:
        wr2 = wr1

    chance1 = round(wr1 / (wr1 + wr2) * 100)
    chance2 = 100 - chance1

    return chance1, chance2

# --- –ù–∞—á–∞–ª–æ –º–∞—Ç—á–∞ —Å —É—á—ë—Ç–æ–º MMR –∏ –∞–≤—Ç–æ—Ä–æ–º ---
@bot.command(name="–Ω–∞—á–∞—Ç—å_–º–∞—Ç—á")
@commands.has_permissions(administrator=True)
async def start_match(ctx, bo_type: str):
    bo_type = bo_type.lower()
    if bo_type not in ["bo1", "bo3", "bo5"]:
        await ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–µ—Ä–∏–∏! –î–æ–ø—É—Å—Ç–∏–º–æ: bo1, bo3, bo5")
        return

    channel_id = ctx.channel.id
    active_matches[channel_id] = {
        "bo_type": bo_type,
        "team1": [],
        "team2": [],
        "score": [0, 0],
        "author_id": ctx.author.id  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∞
    }

    await ctx.send(
        f"–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ **–ü–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã** —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É:\n"
        f"1 - @–∏–≥—Ä–æ–∫\n2 - @–∏–≥—Ä–æ–∫\n3 - @–∏–≥—Ä–æ–∫\n4 - @–∏–≥—Ä–æ–∫\n5 - @–∏–≥—Ä–æ–∫\n\n"
        f"‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ @, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏."
    )

    def check(m):
        return m.channel.id == ctx.channel.id and (
                m.author.id == ctx.author.id or m.author.guild_permissions.administrator
        )

    try:
        # --- –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ---
        # –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        msg1 = await bot.wait_for("message", check=check, timeout=300)

        if len(msg1.mentions) != 5:
            await ctx.send("‚ùå –°–æ—Å—Ç–∞–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –°–µ—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            del active_matches[channel_id]
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        lines1 = msg1.content.split("\n")
        if len(lines1) != 5:
            await ctx.send("‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 5 —Å—Ç—Ä–æ–∫ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.")
            del active_matches[channel_id]
            return

        mentions1 = []
        for line in lines1:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            found = [m for m in msg1.mentions if f"<@{m.id}>" in line]
            if len(found) != 1:
                await ctx.send("‚ùå –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ @.")
                del active_matches[channel_id]
                return
            mentions1.append(found[0])

        active_matches[channel_id]["team1"] = mentions1
        await ctx.send("‚úÖ –°–æ—Å—Ç–∞–≤ –ü–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –í—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã:")

        # –í—Ç–æ—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞
        msg2 = await bot.wait_for("message", check=check, timeout=300)

        if len(msg2.mentions) != 5:
            await ctx.send("‚ùå –°–æ—Å—Ç–∞–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –°–µ—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            del active_matches[channel_id]
            return

        lines2 = msg2.content.split("\n")
        if len(lines2) != 5:
            await ctx.send("‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 5 —Å—Ç—Ä–æ–∫ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.")
            del active_matches[channel_id]
            return

        mentions2 = []
        for line in lines2:
            found = [m for m in msg2.mentions if f"<@{m.id}>" in line]
            if len(found) != 1:
                await ctx.send("‚ùå –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ @.")
                del active_matches[channel_id]
                return
            mentions2.append(found[0])

        active_matches[channel_id]["team2"] = mentions2
        await ctx.send("‚úÖ –°–æ—Å—Ç–∞–≤ –í—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∞–Ω—Å—ã
        chance1, chance2 = await calculate_win_chances_from_team(
            active_matches[channel_id]["team1"],
            active_matches[channel_id]["team2"],
            steam_ids
        )

        embed = discord.Embed(title="–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É", color=0x00ff00)
        embed.add_field(name="–ö–æ–º–∞–Ω–¥–∞ 1", value="\n".join(m.mention for m in active_matches[channel_id]["team1"]), inline=True)
        embed.add_field(name="–ö–æ–º–∞–Ω–¥–∞ 2", value="\n".join(m.mention for m in active_matches[channel_id]["team2"]), inline=True)
        embed.add_field(name="–°—á–µ—Ç", value="0 / 0", inline=False)
        embed.add_field(name="–®–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É", value=f"–ö–æ–º–∞–Ω–¥–∞ 1: {chance1}%\n–ö–æ–º–∞–Ω–¥–∞ 2: {chance2}%", inline=False)
        await ctx.send(embed=embed)

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if channel_id in active_matches:
            del active_matches[channel_id]

@bot.command(name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç")
@commands.has_permissions(administrator=True)
async def match_result(ctx, winner: str):
    channel_id = ctx.channel.id
    if channel_id not in active_matches:
        await ctx.send("‚ùå –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ä–∏–∏ –º–∞—Ç—á–µ–π.")
        return

    match = active_matches[channel_id]

    winner = winner.lower()
    if winner not in ["team1", "team2"]:
        await ctx.send("‚ùå –£–∫–∞–∂–∏—Ç–µ 'team1' –∏–ª–∏ 'team2'.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç
    if winner == "team1":
        match["score"][0] += 1
    else:
        match["score"][1] += 1

    # –¢–µ–∫—Å—Ç –¥–ª—è –º–∞—Ç—á–∞ (–æ–¥–∏–Ω–æ—á–Ω—ã–π –º–∞—Ç—á)
    match_text = (
        f"–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
        f"–ö–æ–º–∞–Ω–¥–∞ 1 ({', '.join(m.mention for m in match['team1'])}) ‚Äî {match['score'][0]}\n"
        f"–ö–æ–º–∞–Ω–¥–∞ 2 ({', '.join(m.mention for m in match['team2'])}) ‚Äî {match['score'][1]}"
    )
    await ctx.send(match_text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ —Å–µ—Ä–∏—è
    bo_type = match["bo_type"]
    needed_wins = {"bo1": 1, "bo3": 2, "bo5": 3}[bo_type]

    # –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã–∏–≥—Ä–∞–ª —Å–µ—Ä–∏—é
    if match["score"][0] >= needed_wins or match["score"][1] >= needed_wins:
        winner_key = "team1" if match["score"][0] >= needed_wins else "team2"
        loser_key = "team2" if winner_key == "team1" else "team1"

        winner_text = "–ö–æ–º–∞–Ω–¥–∞ 1" if winner_key == "team1" else "–ö–æ–º–∞–Ω–¥–∞ 2"
        loser_text = "–ö–æ–º–∞–Ω–¥–∞ 2" if loser_key == "team2" else "–ö–æ–º–∞–Ω–¥–∞ 1"

        final_text = (
            f"{winner_text} –≤ —Å–æ—Å—Ç–∞–≤–µ:\n{', '.join(m.mention for m in match[winner_key])} "
            f"\n–æ–±—ã–≥—Ä–∞–ª–∞ \n{loser_text} –≤ —Å–æ—Å—Ç–∞–≤–µ:\n{', '.join(m.mention for m in match[loser_key])}\n"
            f"\n–°–µ—Ä–∏—è: {bo_type.upper()}, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: {match['score'][0]} / {match['score'][1]}"
        )

        # –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Ä–∏–∏
        results_channel = discord.utils.get(ctx.guild.text_channels, name="5x5-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        if results_channel:
            await results_channel.send(final_text)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
        stats_dota.update_player_stats(match[winner_key], is_win=True)
        stats_dota.update_player_stats(match[loser_key], is_win=False)

        # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Ä–∏—é
        del active_matches[channel_id]

@bot.command(name="—Å—á–µ—Ç")
async def show_score(ctx):
    channel_id = ctx.channel.id
    if channel_id not in active_matches:
        await ctx.send("‚ùå –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ä–∏–∏ –º–∞—Ç—á–µ–π.")
        return

    match = active_matches[channel_id]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω
    if ctx.author.id != match.get("author_id") and not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä —Å–µ—Ä–∏–∏ –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç.")
        return

    team1 = match["team1"]
    team2 = match["team2"]
    score1, score2 = match["score"]

    embed = discord.Embed(title="üìä –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç —Å–µ—Ä–∏–∏", color=0x00ffcc)
    embed.add_field(name="–ö–æ–º–∞–Ω–¥–∞ 1", value="\n".join(m.mention for m in team1), inline=True)
    embed.add_field(name="–ö–æ–º–∞–Ω–¥–∞ 2", value="\n".join(m.mention for m in team2), inline=True)
    embed.add_field(name="–°—á—ë—Ç", value=f"{score1} / {score2}", inline=False)

    await ctx.send(embed=embed)

@bot.command(name="—Å—Ç–∞—Ç–∞_–¥–æ—Ç–∞")
async def show_stats(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author

    stats = stats_dota.load_stats()
    pid = str(member.id)
    if pid not in stats:
        await ctx.send(f"üìä –£ {member.mention} –ø–æ–∫–∞ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π.")
        return

    wins = stats[pid]["wins"]
    losses = stats[pid]["losses"]
    total = wins + losses
    wr = round((wins / total) * 100, 1) if total > 0 else 0

    await ctx.send(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {member.mention}:\n"
        f"üèÜ –ü–æ–±–µ–¥: {wins}\n"
        f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}\n"
        f"üìà Winrate: {wr}%"
    )


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.run(TOKEN)

